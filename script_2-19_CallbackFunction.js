//---Callback functions---
"use strict";
/*Если функции в коде идут одна за другой, то это не означает, что они запускаются в той же
очередности. Это происходит из-за различных задержек в этих функциях.
Задержки происходят (зависят) от сложности расчетов, выполнения различного рода операций 
в этих функциях и т.д. */
//Пример-------------------------------------
function first() {
    //Do something
    setTimeout(function() { //делает определенную задержку в коде. Об этом позднее
        console.log(1);
    }, 500); //задержка 500 мс 
}

function second() {
    console.log(2);
}
first();
second();
//-------------------------------------------

//---Главный шаблон функции Callback---
//1. Создаем функцию
function learnJS(lang, callback) {  //lang и callback - аргументы функции
    //в другую функцию в качестве аргумента, в будущем, мы можем передать другую функцию
    console.log(`Я учу: ${lang}`);  //только когда выполнится действие от 1ой функции
    callback();                     //то только потом выполнится 2ая функция
}
//и по классике мы должны вызвать эту функцию
learnJS('JavaScript', function() {      //здесь JavaScript - это lang, 
                                        //function() это передача функции callback
    console.log('Я прошел этот урок');  //здесь пишем то, что выполняет эта функция
});
/*Результат:
Я учу: JavaScript
Я прошел этот урок
*/

//Из-за того, что мы применили анонимную функцию function(), она исчезнет, после выполнения. 
//Если мы создадим осознаную функцию, то она будет применяться без "исчезновения"
//Пример использования, вместо function(): 
/*function done() {
    console.log('Я прошел этот урок');
}
learnJS('JavaScript', done);*/

/* Callback позволяет нам быть уверенным в том, что определенный код не начнет исполнение 
до того момента, пока другой код не завершит свое исполнение */