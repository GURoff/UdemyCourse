//---Объекты и деструктуризация объектов (ES6)---

"use strict";
//---1. Как перебрать все свойства внутри объекта и все их ключи. -------------------------------
//создадим объект при помощи заведения переменной (можем так)
const obj = new Object;
//Создадим объект (классически)
const options = {
    name: 'test',
    width: 1024,
    height: 1024,
    colors: { //объект в объекте
        border: 'black',
        bg: 'red'
    }
};
//console.log(options.name);
//console.log(options["colors"]["border"]);

/*если требуется удалить какое-то свойство или пару из объекта, то тут потребуется
другой оператор - delete */
// delete options.name;
// console.log(options);

/*чтобы перебрать все свойства объекта, мы можем воспользоваться конструкцией, которая называется for in.
//цикл for пройдет столько раз, сколько свойств в объекте*/
/*for (let key in options) { //каждое ствойство называется key, будем копаться в options
    console.log(`Свойство ${key} имеет значение ${options[key]}`);
}*/
//НО !!! При выводе результата в консоль 4ой строчкой идет
//"Свойство colors имеет значение [object Object]". 
//Он не может залезть в colors, т.к. это будто объект в объекте.
//------------------------------------------------------------------------------------
//Для этого мы используем следующую конструкцию:
/*for (let key in options) { //каждое ствойство называется key, будем копаться в options
    if (typeof(options[key])== 'object') {
        for (let i in options[key]) {
            console.log(`Свойство ${i} имеет значение ${options[key][i]}`);
        }
    } else {
        console.log(`Свойство ${key} имеет значение ${options[key]}`);
    }
} */
/*Когда мы перебираем все ключи, мы можем проверять каждый при помощи условий.
Если значение ключа будет объектом, то мы можем запустить перебор внутри перебора. 
Для этого тут применяется IF. Или же мы можем это сделать при помощи команды, которая
находится на 18ой строке - console.log(options["colors"]["border"]);
--------------------------------------------------------------------------------------*/
//Счетчик для подсчета количества ключей в объекте
/*let counter = 0;
for (let key in options) { //каждое ствойство называется key, будем копаться в options
    if (typeof(options[key])== 'object') {
        for (let i in options[key]) {
            console.log(`Свойство ${i} имеет значение ${options[key][i]}`);
            counter++;
        }
    } else {
        console.log(`Свойство ${key} имеет значение ${options[key]}`);
        counter++;
    }
}
console.log(counter); */

//---2. Функции и методы, которые уже есть внутри объекта----------------------------------------
// Метод ObjectKeys - ключи нашего объекта:
//console.log(Object.keys(options)); //метод берет объект, и на его основании создает массив, 
                            //в котором все элементы - ключи, находящиеся в верхней части объекта
//как результат получаем массив с ключами - [ 'name', 'width', 'height', 'colors' ]
//Далее, чтобы узнать какое количество элементов находится там, мы можем применить функцию length:
//console.log(Object.keys(options).length);
//Благодаря этому можно избежать громоздких конструкций с counter++
//------------------------------
//Создание методов самостоятельно-------
/*const options = {
    name: 'test',
    width: 1024,
    height: 1024,
    colors: { //объект в объекте
        border: 'black',
        bg: 'red'
    },
    makeTest: function() { //запись функции в объект - это как бы создание метода
        console.log("Test");
    }
};
options.makeTest();-------------------------------------*/

//Деструктуризация объекта
/*Иногда нам нужно дойти до свойств объекта, и использовать console.log(options["colors"]["border"]);
не очень удобно. Что б этим не заниматься - существует деструктуризация объекта.
Изначально указываются свойства объекта {border, bg}, а потом сам объект, из которого нужно вытащить 
эти свойства = options.colors;*/
const {border, bg} = options.colors;
console.log(border);